@page "/ManageTranslations"
@using BingoLingo.Shared
@inject HttpClient _http
@inject ILogger<ManageTranslations> _logger;
@inject DialogService _dialogService;

<PageTitle>Manage translations</PageTitle>
    <div>
        <RadzenButton Click="@NewTranslation">Create new</RadzenButton>
    </div>
    
<RadzenDataGrid Data="@_translations" Count="@_count" LoadData="@LoadData"
                IsLoading="@_isLoading" AllowPaging="true" PageSize="10"
                TItem="Translation" @ref="_grid">
    <Columns>
        <RadzenDataGridColumn TItem="Translation" Property="Original" Title="Originale"/>
        <RadzenDataGridColumn TItem="Translation" Property="Translated" Title="Translated"/>
        <RadzenDataGridColumn TItem="Translation" Property="Created" Title="Created" Width="10%" FormatString="@DateLayout"/>
        <RadzenDataGridColumn TItem="Translation" Property="Modified" Title="Modified" Width="10%" FormatString="@DateLayout"/>
        <RadzenDataGridColumn TItem="Translation" Width="4%">
            <Template Context="translation">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light"
                    Click="@(async() =>await Edit(translation))">&#x270E;</RadzenButton>
            </Template>
        </RadzenDataGridColumn> 
    </Columns>

</RadzenDataGrid>

@code
{
    private const string DateLayout = "{0:dd.MM.yyyy HH:mm:ss}";

    private List<Translation> _translations;

    private int _count;
    private bool _isLoading;
    private RadzenDataGrid<Translation> _grid;



    private async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        try
        {
            var request = new TranslationSearchRequest(args.Top ?? 500, args.Skip ?? 0);
            var httpResponse = await _http.PostAsJsonAsync("/Translations/Search", request);
            await httpResponse.ThrowIfError(_logger);

            var response = await httpResponse.Content.ReadFromJsonAsync<TranslationSearchResponse>();

            _translations = response.Translations;
            _count = response.TotalCount;
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task NewTranslation()
    {
        Translation CreateTranslation() => new("", "", Guid.NewGuid().ToString());
        

        var translation = CreateTranslation();
        while (await _dialogService.OpenAsync<EditTranslation>("New translation",
            new Dictionary<string, object> {{ "Translation", translation }} ) == true)
        {
            var res = await _http.PutAsJsonAsync("/translations", translation);
            await res.ThrowIfError(_logger);

            await _grid.Reload();


            translation = CreateTranslation();
        }
    }

    private async Task Edit(Translation translation)
    {
        if (await _dialogService.OpenAsync<EditTranslation>("Edit translation",
            new Dictionary<string, object> { { "Translation", translation } }) == true)
        {
            var res = await _http.PostAsJsonAsync("/translations", translation);
            await res.ThrowIfError(_logger);

            await _grid.Reload();
        }
    }

    private void EnsureTranslations()
    {
        _translations ??= new();
    }

}
